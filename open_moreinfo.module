<?php

/**
 * Webservice @ http://moreinfo.addi.dk/
 * */

module_load_include('inc', 'open_moreinfo', 'open_moreinfo.admin');

define('OPEN_MOREINFO_CACHE_LIFETIME', 604800);

/**
 * Implements hook_ting_client_webservice (@see ting_client.module)
 **/
function open_moreinfo_ting_client_webservice() {
  $ret = array();
  $ret['moreInfo']['class'] = 'moreInfo';
  $ret['moreInfo']['url'] = 'moreInfo_url';
  return $ret;
}


/**
 * Implements hook_how_r_u()
 *
 * @return array
 */
function open_moreinfo_how_r_u() {
  return array('MoreInfo' => variable_get('moreInfo_url', ''));
}


/**
 * Implementation of hook_cron().
 */
function open_moreinfo_cron() {
  if (module_exists('image')) {
    // get default styles
    $styles = image_styles();
    foreach ($styles as $key => $style) {
      // delete the images
      image_style_flush($style);
    }
  }
  _open_moreinfo_delete_old_files($_SERVER['REQUEST_TIME'] -
    variable_get('moreInfo_cache_lifetime', OPEN_MOREINFO_CACHE_LIFETIME));

  cache_clear_all('*', 'cache_open_moreinfo', 'TRUE');

}


/**
 * Implementation of hook_flush_caches.
 */
function open_moreinfo_flush_caches() {
  _open_moreinfo_delete_old_files();
}


/**
 * Delete moreinfo files.
 *
 * @param int $time Timestamp where older files will be deleted.
 * Omit or set to NULL to delete all files.
 */
function _open_moreinfo_delete_old_files($time = NULL) {

  $moreinfo_files = array();

  // Collect potential locations of cover folders
  $moreinfo = new moreInfo();
  foreach ($moreinfo->getTypes() as $object_type) {
    $files_dir = file_default_scheme() . '://moreinfo/' . $object_type;
    if (is_dir($files_dir)) {
      $moreinfo_files = array_merge($moreinfo_files, _open_moreinfo_get_files($files_dir));
    }
  }

  //Delete obsolete files
  foreach ($moreinfo_files as $file) {
    if (!$time || (filemtime($file) < $time)) {
      file_unmanaged_delete($file);
    }
  }
}


/**
 * Retrieve all files under a path recursively
 *
 * @param string $files_path Path or URI
 *
 * @return array An array of file paths or URIs
 */
function _open_moreinfo_get_files($files_path) {
  $files = array();

  foreach (scandir($files_path) as $path) {
    $file_path = $files_path . DIRECTORY_SEPARATOR . $path;
    if (is_dir($file_path)) {
      if (!in_array($path, array('.', '..'))) {
        $files = array_merge($files, _open_moreinfo_get_files($file_path));
      }
    }
    else {
      $files[] = $file_path;
    }
  }

  return $files;
}


/**
 * Return the path to the moreInfo object.
 *
 * @param string PID
 *
 * @return string
 */
function open_moreinfo_object_path($object_id, $object_type = NULL) {
  if (empty($object_id)) {
    watchdog('moreinfo',
      'open_moreinfo_object_path() was called with empty object ID. Object type: %object_type',
      array('%object_type' => $object_type), WATCHDOG_NOTICE);
    return NULL;
  }

  if (empty($object_type)) {
    watchdog('moreinfo',
      'open_moreinfo_object_path() was called with empty object type. Object ID: %object_id',
      array('%object_id' => $object_id), WATCHDOG_NOTICE);
    return NULL;
  }

  $moreinfo = new moreInfo();

  if (!in_array($object_type, $moreinfo->getTypes())) {
    watchdog('moreinfo',
      'open_moreinfo_object_path() was called with invalid object type. Object ID: %object_id. Object type: %object_type',
      array(
        '%object_id' => $object_id,
        '%object_type' => $object_type,
      ), WATCHDOG_ERROR);
    return NULL;
  }

  $path = file_default_scheme() . '://moreinfo/' . $object_type . '/' . md5($object_id) .
    $moreinfo->getFileType($object_type);
  if (!file_exists($path)) {
    $moreinfo = open_moreinfo_get_objects($object_id, $object_type);
    if (isset($moreinfo[$object_id]) && isset($moreinfo[$object_id][$object_type])) {
      $path = $moreinfo[$object_id][$object_type];
    }
  }

  return $path;
}


/**
 * Download images and pdf documents
 * Return the URLs for the object
 */
function open_moreinfo_get_objects($object_id, $object_type = NULL) {
  if (!is_array($object_id)) {
    $object_id = array($object_id);
  }

  $objects = $ids = array();
  $moreinfo_object = new moreInfo();

  foreach ($object_id as $local_id) { // ex. [0] => 29316627
    // Determine if the local id is a known negative
    if (!cache_get('open_moreinfo:' . $object_type . ':' . $local_id, 'cache_open_moreinfo')) {
      //Mark the image for retrieval;
      $ids[] = $local_id;
    }
    else {
      $objects[$local_id][$object_type] = NULL;
    }
  }

  //Try to download the missing images
  try {
    $service = new moreInfoService(
      variable_get('moreInfo_url', ''),
      variable_get('moreInfo_username', ''),
      variable_get('moreInfo_group', ''),
      variable_get('moreInfo_password', '')
    );

    foreach ($ids as $local_id) {
      //Local ids = Faust numbers.
      $faust_id = explode(':', $local_id);
      $base_no = (isset($faust_id[0]) && isset($faust_id[1])) ? $faust_id[0] : FALSE;
      // $base_no might be like 870971-anmeld - we only want the first part
      if ($base_no) {
        if (strpos($base_no, '-') !== FALSE) {
          $bibno = explode('-', $local_id);
          $bibno = $bibno[0];
        }
        else {
          $bibno = $base_no;
        }
      }
      $faust_id = isset($faust_id[1]) ? $faust_id[1] : $faust_id[0];
      if (isset($bibno) && $bibno == '870971') {
        $local_identifier = array(
          'localIdentifier' => $faust_id,
          'libraryCode' => $bibno,
        );
        $moreinfo = $service->getByLocalIdentifier($local_identifier);
      }
      else {
        $moreinfo = $service->getByFaustNumber($faust_id);
      }

      if (!empty($moreinfo)) {
        foreach ($moreinfo[$faust_id]->getTypes() as $type) {
          $objects[$local_id][$type] = NULL;
          if (!$moreinfo[$faust_id]->$type) {
            // No object found? Cache this for future reference to avoid unnecessary requests
            cache_set('open_moreinfo:' . $type . ':' . $local_id, TRUE, 'cache_open_moreinfo',
              $_SERVER['REQUEST_TIME'] +
              variable_get('moreInfo_cache_lifetime', OPEN_MOREINFO_CACHE_LIFETIME));
          }
          else {
            $filetype = $moreinfo_object->getFileType($type);
            if ($file = _open_moreinfo_fetch_object($local_id, $type, $filetype,
              $moreinfo[$faust_id]->$type)) {
              //Generate a path corresponding to the downloaded image
              $objects[$local_id][$type] =
                file_default_scheme() . '://moreinfo/' . $type . '/' . md5($local_id) .
                $moreinfo[$faust_id]->getFileType($type);
            }
          }
        }
      }

    }
  } catch (Exception $e) {
    error_log('open_moreinfo: Unable to retrieve info from moreInfo: ' . $e->getMessage());
    watchdog('open_moreinfo', 'Unable to retrieve info from moreInfo: %message',
      array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }

  // Return all image information
  // ex. [870970-basis:29316627][detailUrl]      => http://domain.dk/path/to/type/detailUrl/md5id.jpg
  // ex. [870970-basis:29316627][backpagePdfUrl] => http://domain.dk/path/to/type/backpagePdfUrl/md5id.pdf
  return ($objects);
}

/**
 * Helper function to fetch and save a cover image file.
 *
 * @param string $filename
 *    File name, including its path within Drupal's file folder.
 * @param string $image_url
 *    URL for the source image file.
 *
 * @return mixed
 *    A file object or FALSE on error.
 * @see image_style_create_derivative()
 *
 */
function _open_moreinfo_fetch_object($object_id, $object_type, $filetype, $object_url = FALSE) {
  if (!$object_url) {
    return FALSE;
  }

  $filename =
    file_default_scheme() . '://moreinfo/' . $object_type . '/' . md5($object_id) . $filetype;

  // there's a hard-coded test case for faustnr 12345678 in class AdditionalInformationService
  if ($object_id == '12345678') {
    $file = new stdClass();
    $file->uri = 'public://moreinfo/filetype/md5id.jpg';
    return $file;
  }

  $result = drupal_http_request($object_url);

  //Bail if the HTTP request failed
  if (!empty($result->error)) {
    error_log("open_moreinfo: HTTP request failed for $object_url. Error: $result->error");
    watchdog('open_moreinfo', 'HTTP request failed for %object_url. Error: %error',
      array(
        '%object_url' => $object_url,
        '%error' => $result->error,
      ), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Get the folder for the final location of this preset...
  $directory = dirname($filename);

  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    error_log('open_moreinfo: Failed to create directory: ' . $directory);
    watchdog('open_moreinfo', 'Failed to create directory: %directory',
      array('%directory' => $directory), WATCHDOG_ERROR);
    return FALSE;
  }

  return file_save_data($result->data, $filename, FILE_EXISTS_REPLACE);
}


/**
 * Helper function to get test image URL.
 */
function _get_test_image_url() {
  global $base_url;

  return $base_url . '/' . drupal_get_path('module', 'open_moreinfo') . '/test/test_image.jpg';
}
