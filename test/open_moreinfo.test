<?php

/**
 * @file
 * Test case for OpenHldingsStatus localisation & holdings.
 */

class LocalisationRequestTestCase extends DrupalUnitTestCase {

  private  $holdings_ok;
  private  $holdings_ok_result;
  private  $holdings_none;
  private  $holdings_none_result;

  public static function getInfo() {
    return array(
      'name' => t('Open holdingstatus : LocalisationRequest test'),
      'description' => t('Check if parsing a localisationRequest return a valid array of localisations'),
      'group' => t('bibliotek.dk'),
    );
  }

  public function setUp() {
    parent::setUp(array('open_holdingstatus'));
  }

  function test_parse_localisationRequest() {
    module_load_include('module', 'open_holdingstatus', 'open_holdingstatus');
    $file = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_ok.json');

    $this->holdings_ok = json_decode($file);
    $result = _open_holdingstatus_parse_localisationsRequest($this->holdings_ok);

    $this->holdings_ok_result = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_ok.array.php');
    $result = ( serialize($result) == $this->holdings_ok_result );
    $message = 'LocalisationRequest with 16 localisations is parsed correctly';
    $this->assertTrue($result, $message);
  }

  function test_parse_empty_localisationRequest() {
    $file = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_none.json');
    $this->holdings_ok = json_decode($file);
    $result = _open_holdingstatus_parse_localisationsRequest($this->holdings_ok);
    $this->holdings_none_result = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_none.array.php');
    $result = ( serialize($result) == $this->holdings_none_result );
    $message = 'LocalisationRequest with 0 localisations is parsed correctly';
    $this->assertTrue($result, $message);
  }
}

class OpenHoldingStatusWebTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Open holdingstatus : webservice test'),
      'description' => t('Check if webserviceRequest returns valid results'),
      'group' => t('bibliotek.dk'),
    );
  }

  public function setUp() {
    module_enable(array('open_holdingstatus_webservice_mockup'));
    menu_rebuild();
    parent::setUp(array('open_holdingstatus', 'open_holdingstatus_webservice_mockup'));
    variable_set('open_holdingstatus_url', $this->getAbsoluteUrl('/open_holdingstatus_webservice/'));
  }

  public function testLocalizationAndHoldingsRequest(){
    $pids = array('870970-basis:28542941', '870970-basis:28794932');
    $expected_localisation_pid = '870970-basis:28794932';
    $agency_id = 'DK-870970';
    $localizations = open_holdingstatus_localisationRequest($pids, $agency_id);
    $this->assertTrue(
      !empty($localizations['agencies']['715100']['holdings']['870970-basis:28794932']['localisationPid']) &&
      $localizations['agencies']['715100']['holdings']['870970-basis:28794932']['localisationPid'] == $expected_localisation_pid,
      'lozalizations are set'
    );
    $this->verbose(print_r($localizations['agencies']['715100']['holdings']['870970-basis:28794932'],1));
    $agency_ids = array('DK-870970', 'DK-720100', 'DK-710100');
    $holdings  = open_holdingstatus_holdingsRequest($agency_ids, $pids[0]);
    $this->assertTrue(count($holdings) == 3, 'Errors and Responders have been merged');
    $this->assertTrue($holdings[0]->willLend->{'$'}, 'first holdingStatus result WillLend');
    $this->assertTrue($holdings[2]->errorMessage->{'$'} == 'item_not_found', 'third holdingStatus result has errorMessage item_not_found');
  }
}
