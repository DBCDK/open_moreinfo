<?php

/**
 * @file
 * Test case for moreInfo client.
 */

class moreInfoWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Open MoreInfo client : web test'),
      'description' => 'Check if we can retrieve covers and pdf files',
      'group' => t('Open Library'),
    );
  }


  public function setUp() {

    $this->profile = 'minimal';
    parent::setUp(
      array(
        'bibdk_webservice_settings_develop',
        'open_moreinfo',
      )
    );

    $moreinfo_info = array(
      'url' => variable_get('open_moreinfo_url',NULL),
      'username' => variable_get('open_moreinfo_username',NULL),
      'group'    => variable_get('open_moreinfo_group', NULL),
      'password' => variable_get('open_moreinfo_password', NULL),
     );

    //All variables have been reset to set these again!
    foreach ($moreinfo_info as $k => $v) {
      variable_set('open_moreinfo_'.$k, $v);
    }

    // allow you to log messages with error_log() to "sites/default/files/test.log"
    $logfile = conf_path() . '/files/test.log';
    ini_set('log_errors', 1);
    ini_set('error_log', $logfile);

    $this->web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->web_user);
  }


  public function testRunner() {
    $this->testObjectPath();
    $this->testOpenMoreinfoFetchObject();
    $this->testOpenMoreinfoGetObjects();
  }


  private function testObjectPath() {
    // can't be done as unit test since it's got a call to watchdog()

    $result = open_moreinfo_object_path(NULL, 'foobar');
    $this->assertTrue($result == NULL, 'open_moreinfo_object_path() return NULL if object_id is empty');

    $result = open_moreinfo_object_path('870970-basis:12345678', NULL);
    $this->assertTrue($result == NULL, 'open_moreinfo_object_path() return NULL if object_type is empty');

    $result = open_moreinfo_object_path('870970-basis:12345678', '');
    $this->assertTrue($result == NULL, 'open_moreinfo_object_path() return NULL if object_type is not valid');

    $expected = 'public://moreinfo/thumbnailUrl/' . md5('870970-basis:12345678') . '.jpg';
    $result = open_moreinfo_object_path('870970-basis:12345678', 'thumbnailUrl');
    $this->assertTrue($result == $expected, 'open_moreinfo_object_path() return path if object_type is valid, and object_id is valid');

  }


  private function testOpenMoreinfoFetchObject() {
    global $base_url;

    $url = 'http://foobarbas.dk/fubar.php?id=test';
    $result = _open_moreinfo_fetch_object('foo', 'bar', 'baz', $url);
    $this->assertTrue($result == FALSE, '_open_moreinfo_fetch_object() return FALSE if object_url is not found');

    $url = _get_test_image_url();
    $result = _open_moreinfo_fetch_object(12345678, 'thumbnailUrl', 'jpg', $url);
    $this->assertTrue($result == TRUE, '_open_moreinfo_fetch_object() can fetch and save test image file.');

  }


  private function testOpenMoreinfoGetObjects() {
    $result = open_moreinfo_get_objects('870970-basis:12345678', 'thumbnailUrl');
    $expected = 'public://moreinfo/thumbnailUrl/' . md5('870970-basis:12345678') . '.jpg';
    //$this->assertTrue($result['870970-basis:12345678']['thumbnailUrl'] == $expected, 'open_moreinfo_get_objects() return "' . $expected . '" if object_id = 870970-basis:12345678');

    $result = open_moreinfo_get_objects('870970-basis:87654321', 'thumbnailUrl');
    $this->assertTrue($result == array(), 'open_moreinfo_get_objects() return empty array if object_id = 870970-basis:87654321');

  }


}
